////完全背包问题
////有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。
////第 i 种物品的体积是 vi，价值是 wi。
////求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。
////输出最大价值。
////输入格式
////第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。
////接下来有 N 行，每行两个整数 vi, wi，用空格隔开，分别表示第 i 种物品的体积和价值。
//#include<iostream>
//#include<vector>
//
//using namespace std;
//
////动态规划1dimension
//int maxValue(vector<int>v,vector<int>w,int V)
//{
//	vector<int> f(V + 1,0);
//	for (int i = 0; i < v.size(); i++)
//	{
//		for (int j = v[i]; j <=V; j++)
//		{
//			f[j] = max(f[j],f[j-v[i]]+w[i]);
//		}
//	}
//	return f[V];
//}
//
//int main()
//{
//	int N, V;
//	/*cin >> N >> V;
//	vector<int> w(N + 1,0), v(N + 1,0);
//	for (int i = 1; i <= N; i++)
//	{
//		cin >> v[i] >> w[i];
//	}*/
//	N = 4, V = 5;
//	vector<int> w(N, 0), v(N, 0);
//	v={1,2,3,4};
//	w = {2,4,4,5};
//	cout << maxValue(v,w,V) << endl;
//	return 0;
//}